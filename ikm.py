# –£–∑–µ–ª —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Å—Ç–µ–∫–∞
class Node:
    def __init__(self, value):
        self.value = value  # –∑–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
        self.next = None    # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–µ–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
class Stack:
    def __init__(self):
        self.top = None  # –≤–µ—Ä—à–∏–Ω–∞ —Å—Ç–µ–∫–∞ (—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)

    # –ü–æ–º–µ—Å—Ç–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å—Ç–µ–∫
    def push(self, value):
        node = Node(value)  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–∑–µ–ª
        node.next = self.top  # —Å–≤—è–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —É–∑–µ–ª —Å —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω–æ–π
        self.top = node  # –Ω–æ–≤—ã–π —É–∑–µ–ª —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤–µ—Ä—à–∏–Ω–æ–π

    # –í—ã—Ç–æ–ª–∫–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ —Å—Ç–µ–∫–∞
    def pop(self):
        if self.top is None:
            raise ValueError("–°—Ç–µ–∫ –ø—É—Å—Ç")  # –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—É—Å—Ç–æ–≥–æ —Å—Ç–µ–∫–∞
        value = self.top.value  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—à–∏–Ω—ã
        self.top = self.top.next  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
        return value  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ

    # –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–µ–∫
    def clear(self):
        self.top = None

    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–µ–∫–µ
    def __len__(self):
        count = 0
        current = self.top
        while current:
            count += 1
            current = current.next
        return count

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å ‚Äî –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å –≤—ã—Ä–∞–∂–µ–Ω–∏–π
class ExpressionEvaluator:
    def __init__(self):
        self.stack = Stack()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    def is_valid_expression(self, expr):
        allowed = "0123456789mM(),"
        bracket_balance = 0  # –±–∞–ª–∞–Ω—Å –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏ –∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫

        for char in expr:
            if char not in allowed:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª:", char)
                return False
            if char == '(':
                bracket_balance += 1
            elif char == ')':
                bracket_balance -= 1
            if bracket_balance < 0:
                print("‚ùå –û—à–∏–±–∫–∞: –ª–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.")
                return False

        if bracket_balance != 0:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏.")
            return False

        if not self.has_valid_arguments(expr):
            print("‚ùå –û—à–∏–±–∫–∞: —É —Ñ—É–Ω–∫—Ü–∏–π m/M –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
            return False

        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É —Ñ—É–Ω–∫—Ü–∏–π m –∏ M –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    def has_valid_arguments(self, expr):
        i = 0
        while i < len(expr):
            if expr[i] in 'mM' and i + 1 < len(expr) and expr[i + 1] == '(':
                i += 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                depth = 1  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫
                args = []  # –∞—Ä–≥—É–º–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏
                current = ''  # —Å–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
                while i < len(expr) and depth > 0:
                    if expr[i] == '(':
                        depth += 1
                        current += expr[i]
                    elif expr[i] == ')':
                        depth -= 1
                        if depth > 0:
                            current += expr[i]
                    elif expr[i] == ',' and depth == 1:
                        args.append(current.strip())
                        current = ''
                    else:
                        current += expr[i]
                    i += 1
                args.append(current.strip())
                if len(args) != 2:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ä–æ–≤–Ω–æ –¥–≤–∞
                    return False
            else:
                i += 1
        return True

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    def evaluate(self, expr):
        self.stack.clear()  # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
        i = len(expr) - 1  # –æ–±—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ (–æ–±—Ä–∞—Ç–Ω—ã–π –æ–±—Ö–æ–¥)

        while i >= 0:
            if expr[i].isdigit():
                number = ''
                # —Å—á–∏—Ç—ã–≤–∞–µ–º —á–∏—Å–ª–æ (—É—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω—ã–µ —á–∏—Å–ª–∞)
                while i >= 0 and expr[i].isdigit():
                    number = expr[i] + number
                    i -= 1
                self.stack.push(int(number))
            elif expr[i] in 'mM':
                op = expr[i]
                i -= 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª —Ñ—É–Ω–∫—Ü–∏–∏ –∏ '('
                if len(self.stack) < 2:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {op}")
                a = self.stack.pop()
                b = self.stack.pop()
                # –ø—Ä–∏–º–µ–Ω—è–µ–º min –∏–ª–∏ max
                result = min(a, b) if op == 'm' else max(a, b)
                self.stack.push(result)
            else:
                # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∫–æ–±–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ
                i -= 1

        if len(self.stack) != 1:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–µ–∫ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.")
        return self.stack.pop()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def main():
    print("üßÆ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ m(...) –∏ M(...), –Ω–∞–ø—Ä–∏–º–µ—Ä: M(15,m(16,8))")
    evaluator = ExpressionEvaluator()

    while True:
        expression = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ")
        if evaluator.is_valid_expression(expression):
            try:
                result = evaluator.evaluate(expression)
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:", result)
                break
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e)
                print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")
        else:
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")

if __name__ == "__main__":
    main()