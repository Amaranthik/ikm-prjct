class ExpressionEvaluator:
    def __init__(self):
        self.stack = []     # –°—Ç–µ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∏—Å–µ–ª –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è


    def is_valid_expression(self, expr):
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è:
        –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã, —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã —É —Ñ—É–Ω–∫—Ü–∏–π
        """
        allowed = "0123456789mM(),"  # –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
        bracket_balance = 0  # —Å—á—ë—Ç—á–∏–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö/–∑–∞–∫—Ä—ã—Ç—ã—Ö —Å–∫–æ–±–æ–∫

        for char in expr:
            if char not in allowed:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª:", char)
                return False
            if char == '(':
                bracket_balance += 1
            elif char == ')':
                bracket_balance -= 1
            # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–ª–∏ —Å–∫–æ–±–∫—É —Ä–∞–Ω—å—à–µ –æ—Ç–∫—Ä—ã—Ç–∏—è ‚Äî –æ—à–∏–±–∫–∞
            if bracket_balance < 0:
                print("‚ùå –û—à–∏–±–∫–∞: –ª–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.")
                return False

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫
        if bracket_balance != 0:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏.")
            return False

        # –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–µ–µ—Ç —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
        if not self.has_valid_arguments(expr):
            print("‚ùå –û—à–∏–±–∫–∞: –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è m(...) –∏ M(...) –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
            return False

        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π m(...) –∏ M(...) –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
    def has_valid_arguments(self, expr):
        i = 0
        while i < len(expr):
            # –∏—â–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∏–¥–∞ m(...) –∏–ª–∏ M(...)
            if expr[i] in 'mM' and i + 1 < len(expr) and expr[i + 1] == '(':
                i += 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
                depth = 1  # –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
                args = []  # —Å–ø–∏—Å–æ–∫ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—É—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏
                current = ''  # —Ç–µ–∫—É—â–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞

                # —Å–æ–±–∏—Ä–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–∏
                while i < len(expr) and depth > 0:
                    if expr[i] == '(':
                        depth += 1
                        current += expr[i]
                    elif expr[i] == ')':
                        depth -= 1
                        if depth > 0:
                            current += expr[i]
                    elif expr[i] == ',' and depth == 1:
                        # —Ä–∞–∑–¥–µ–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—è—Ç–æ–π –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
                        args.append(current.strip())
                        current = ''
                    else:
                        current += expr[i]
                    i += 1

                args.append(current.strip())  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç

                if len(args) != 2:
                    return False
            else:
                i += 1
        return True

    # –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: –≤—ã—á–∏—Å–ª—è–µ—Ç –≤—ã—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç–µ–∫
    def evaluate(self, expr):
        self.stack.clear()  # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
        i = len(expr) - 1  # –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ö–æ–¥ –≤—ã—Ä–∞–∂–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ

        while i >= 0:
            if expr[i].isdigit():
                # —Å—á–∏—Ç—ã–≤–∞–µ–º –º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
                number = ''
                while i >= 0 and expr[i].isdigit():
                    number = expr[i] + number  # —Ü–∏—Ñ—Ä—ã —Å–æ–±–∏—Ä–∞—é—Ç—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
                    i -= 1
                self.stack.append(int(number))  # –∫–ª–∞–¥—ë–º —á–∏—Å–ª–æ –≤ —Å—Ç–µ–∫

            elif expr[i] in 'mM':
                op = expr[i]  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: min –∏–ª–∏ max
                i -= 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 'm(' –∏–ª–∏ 'M('

                # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ —Å—Ç–µ–∫–µ –µ—Å—Ç—å –¥–≤–∞ —á–∏—Å–ª–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
                if len(self.stack) < 2:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {op}")

                # –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–∑ —Å—Ç–µ–∫–∞
                a = self.stack.pop()
                b = self.stack.pop()

                # –≤—ã—á–∏—Å–ª—è–µ–º min –∏–ª–∏ max –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–µ–∫
                result = min(a, b) if op == 'm' else max(a, b)
                self.stack.append(result)
            else:
                # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª—ã '(', ')', ',' –∏ —Ç.–ø.
                i -= 1

        # –≤ –∫–æ–Ω—Ü–µ –≤ —Å—Ç–µ–∫–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç ‚Äî —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if len(self.stack) != 1:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–µ–∫ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.")

        return self.stack[0]


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    print("üßÆ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ m(...) –∏ M(...), –Ω–∞–ø—Ä–∏–º–µ—Ä: M(15,m(16,8))")

    evaluator = ExpressionEvaluator()

    while True:
        expression = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ")

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
        if evaluator.is_valid_expression(expression):
            try:
                result = evaluator.evaluate(expression)
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:", result)
                break  # –≤—ã—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
            except Exception as e:
                # –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e)
                print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")
        else:
            # –µ—Å–ª–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤–≤–æ–¥
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")


# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    main()