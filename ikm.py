class ExpressionEvaluator:
    def __init__(self):
        self.stack = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–∏–º–≤–æ–ª–æ–≤ –∏ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
    def is_valid_expression(self, expr):
        allowed = "0123456789mM(),"
        bracket_balance = 0

        for char in expr:
            if char not in allowed:
                print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª:", char)
                return False
            if char == '(':
                bracket_balance += 1
            elif char == ')':
                bracket_balance -= 1
            if bracket_balance < 0:
                print("‚ùå –û—à–∏–±–∫–∞: –ª–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.")
                return False

        if bracket_balance != 0:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏.")
            return False

        if not self.has_valid_arguments(expr):
            print("‚ùå –û—à–∏–±–∫–∞: –∫–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è m(...) –∏ M(...) –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
            return False

        return True

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏—è—Ö
    def has_valid_arguments(self, expr):
        i = 0
        while i < len(expr):
            if expr[i] in 'mM' and i + 1 < len(expr) and expr[i+1] == '(':
                i += 2
                depth = 1
                args = []
                current = ''
                while i < len(expr) and depth > 0:
                    if expr[i] == '(':
                        depth += 1
                        current += expr[i]
                    elif expr[i] == ')':
                        depth -= 1
                        if depth > 0:
                            current += expr[i]
                    elif expr[i] == ',' and depth == 1:
                        args.append(current.strip())
                        current = ''
                    else:
                        current += expr[i]
                    i += 1
                args.append(current.strip())
                if len(args) != 2:
                    return False
            else:
                i += 1
        return True

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    def evaluate(self, expr):
        self.stack.clear()
        i = len(expr) - 1

        while i >= 0:
            if expr[i].isdigit():
                number = ''
                while i >= 0 and expr[i].isdigit():
                    number = expr[i] + number
                    i -= 1
                self.stack.append(int(number))
            elif expr[i] in 'mM':
                op = expr[i]
                i -= 2  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º 'm(' –∏–ª–∏ 'M('

                if len(self.stack) < 2:
                    raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ {op}")

                a = self.stack.pop()
                b = self.stack.pop()
                result = min(a, b) if op == 'm' else max(a, b)
                self.stack.append(result)
            else:
                i -= 1  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ

        if len(self.stack) != 1:
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–µ–∫ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.")

        return self.stack[0]


# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def main():
    print("üßÆ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ m(...) –∏ M(...), –Ω–∞–ø—Ä–∏–º–µ—Ä: M(15,m(16,8))")

    evaluator = ExpressionEvaluator()

    while True:
        expression = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ")

        if evaluator.is_valid_expression(expression):
            try:
                result = evaluator.evaluate(expression)
                print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:", result)
                break
            except Exception as e:
                print("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", e)
                print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")
        else:
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.\n")


# –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if __name__ == "__main__":
    main()