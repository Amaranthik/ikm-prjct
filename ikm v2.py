# –£–∑–µ–ª —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —Å—Ç–µ–∫–∞
class Node:
    def __init__(self, value):
        self.value = value  # –∑–Ω–∞—á–µ–Ω–∏–µ —É–∑–ª–∞
        self.next = None  # —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É–∑–µ–ª


# –°—Ç–µ–∫, —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤—è–∑–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
class Stack:
    def __init__(self):
        self.top = None  # –≤–µ—Ä—à–∏–Ω–∞ —Å—Ç–µ–∫–∞ (–≤–µ—Ä—Ö–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)

    def push(self, value):
        node = Node(value)  # —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π —É–∑–µ–ª
        node.next = self.top  # –Ω–æ–≤—ã–π —É–∑–µ–ª —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–µ–∫—É—â—É—é –≤–µ—Ä—à–∏–Ω—É
        self.top = node  # –æ–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—É –Ω–∞ –Ω–æ–≤—ã–π —É–∑–µ–ª

    def pop(self):
        if self.top is None:  # –µ—Å–ª–∏ —Å—Ç–µ–∫ –ø—É—Å—Ç, –Ω–µ–ª—å–∑—è –∏–∑–≤–ª–µ—á—å —ç–ª–µ–º–µ–Ω—Ç
            raise ValueError("–°—Ç–µ–∫ –ø—É—Å—Ç")
        value = self.top.value  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤–µ—Ä—à–∏–Ω—ã
        self.top = self.top.next  # —É–¥–∞–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—É, —Å–¥–≤–∏–≥–∞–µ–º —Å—Ç–µ–∫ –≤–Ω–∏–∑
        return value  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á—ë–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    def clear(self):
        self.top = None  # –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–µ–∫–∞ - –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º –≤–µ—Ä—à–∏–Ω—É

    def __len__(self):
        count = 0
        current = self.top
        while current:  # —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å—Ç–µ–∫–µ
            count += 1
            current = current.next
        return count


# –ö–ª–∞—Å—Å –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤—ã—Ä–∞–∂–µ–Ω–∏—è
class ExpressionEvaluator:
    def __init__(self):
        self.stack = Stack()

    def evaluate(self, expr):
        self.stack.clear()  # –æ—á–∏—â–∞–µ–º —Å—Ç–µ–∫ –ø–µ—Ä–µ–¥ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º
        i = len(expr) - 1  # –∏–¥—ë–º –ø–æ —Å—Ç—Ä–æ–∫–µ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ

        while i >= 0:
            if expr[i].isdigit():  # –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª —Ü–∏—Ñ—Ä–∞
                number = ''
                # —Å–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —á–∏—Å–ª–æ (–º–Ω–æ–≥–æ–∑–Ω–∞—á–Ω–æ–µ)
                while i >= 0 and expr[i].isdigit():
                    number = expr[i] + number
                    i -= 1
                self.stack.push(int(number))  # –∫–ª–∞–¥—ë–º —á–∏—Å–ª–æ –≤ —Å—Ç–µ–∫
            elif expr[i] in 'mM':  # –µ—Å–ª–∏ —Å–∏–º–≤–æ–ª m –∏–ª–∏ M ‚Äî —Ñ—É–Ω–∫—Ü–∏—è min –∏–ª–∏ max
                op = expr[i]
                i -= 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–º–≤–æ–ª —Ñ—É–Ω–∫—Ü–∏–∏ –∏ '('
                a = self.stack.pop()
                b = self.stack.pop()
                # –≤—ã—á–∏—Å–ª—è–µ–º min –∏–ª–∏ max
                result = min(a, b) if op == 'm' else max(a, b)
                self.stack.push(result)  # –∫–ª–∞–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç–µ–∫
            else:
                i -= 1  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∫–æ–±–∫–∏ –∏ –∑–∞–ø—è—Ç—ã–µ

        if len(self.stack) != 1:  # –≤ –∫–æ–Ω—Ü–µ –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —ç–ª–µ–º–µ–Ω—Ç
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: —Å—Ç–µ–∫ –Ω–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω.")
        return self.stack.pop()  # –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è


def main():
    print("üßÆ –í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ m(...) –∏ M(...), –Ω–∞–ø—Ä–∏–º–µ—Ä: M(15,m(16,8))")

    evaluator = ExpressionEvaluator()

    while True:
        expr = input("–í–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤: ")

        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            allowed = "0123456789mM(),"
            for ch in expr:
                if ch not in allowed:
                    raise ValueError(f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å–∏–º–≤–æ–ª: {ch}")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–∫–æ–±–æ–∫
            balance = 0
            for ch in expr:
                if ch == '(':
                    balance += 1
                elif ch == ')':
                    balance -= 1
                if balance < 0:  # –µ—Å–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ –±–æ–ª—å—à–µ, —á–µ–º –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö
                    raise ValueError("–õ–∏—à–Ω—è—è –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞.")
            if balance != 0:  # –µ—Å–ª–∏ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Å–∫–æ–±–æ–∫ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                raise ValueError("–ù–µ—Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏.")

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —É —Ñ—É–Ω–∫—Ü–∏–π m/M —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
            i = 0
            while i < len(expr):
                if expr[i] in 'mM' and i + 1 < len(expr) and expr[i + 1] == '(':
                    i += 2  # –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ '('
                    depth = 1  # —Å—á–∏—Ç–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∫–æ–±–æ–∫
                    current = ''
                    args = []
                    while i < len(expr) and depth > 0:
                        if expr[i] == '(':
                            depth += 1
                            current += expr[i]
                        elif expr[i] == ')':
                            depth -= 1
                            if depth > 0:
                                current += expr[i]
                        elif expr[i] == ',' and depth == 1:
                            args.append(current.strip())  # –¥–æ–±–∞–≤–ª—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç –≤ —Å–ø–∏—Å–æ–∫
                            current = ''
                        else:
                            current += expr[i]
                        i += 1
                    args.append(current.strip())  # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç
                    if len(args) != 2:  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞
                        raise ValueError("–§—É–Ω–∫—Ü–∏—è m/M –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ –¥–≤–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–∞.")
                else:
                    i += 1

            # –ï—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –≤—ã—á–∏—Å–ª—è–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
            result = evaluator.evaluate(expr)
            print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:", result)
            break  # –∑–∞–≤–µ—Ä—à–∞–µ–º —Ü–∏–∫–ª –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–∏

        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞:", e)
            print("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.\n")


if __name__ == "__main__":
    main()
